name: trivy

on:      
  workflow_dispatch:
    inputs:
      name:
        description: "Docker TAG"
        required: true
        default: "master"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: QEMU Emulator
        uses: docker/setup-qemu-action@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.7.0

      # ✅ 내장 빌더 사용 (Docker 데몬 기반)
      - name: Setup Docker buildx (builtin)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          install: true

      # ✅ Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ✅ GitHub Container Registry 로그인
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ✅ 이미지 태그, 메타정보 추출
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ github.event.inputs.name }}

      # ✅ Docker 이미지 빌드 및 푸시 (단일 플랫폼: ARM64)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64

      # ✅ Trivy 보안 취약점 검사
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: table
          exit-code: 0              # 취약점이 있어도 빌드 실패는 안함
          ignore-unfixed: true      # 아직 패치되지 않은 취약점 제외
          vuln-type: os,library     # OS 패키지 + 라이브러리 검사
